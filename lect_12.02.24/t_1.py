class Cat:
    def __init__(self, name):
        self.name = name
        self.age = 0

    def bite(self, other):
        print(f"Cat {self.name} bites {other.name}")

    def miu(self):
        print(f"Meow {self.name}")

    def growup(self):
        self.age += 1


catV = Cat("Vasya")
catK = Cat("Kuzia")
catV.bite(catK)
catK.growup()
catK.growup()
print(catK.age)

print(catV.name)

# ООП - парадигма програмування, яка розглядає програму, як множину об'єктів, що взаємодіють між собою
# Основна мета ООП - забезпечити повторне використування коду, спростити програмування, піднявши його на новий рівень абстракції
# Клас - асбтракція, що описує спільну поведінку, та властивості подібних об'єктів
# Об'єкт - певна сутність, що має визначені поведшнку, властивості та стан
# Головна ідея ООП - об'днати дані і функції, що призначені для обробки даних
# Всі дані об'єкта зберігаються в його атрибутах
# Атрибут(поле або властивість) - змінна, пов'язана з классом або з об'яктом. Приклад: self.name
# Стан об'єкта визначається поточним значення кожного із атрибутів
# Метод - підпрограма, що використовується виключно разом із класом, або із екземпляром класу
# Призначення метода у здійсненні маніпуляцій над полями об'єктів
# Методи визначають його поведінку, або змінюють його стан
#                   Абстракція та абстрагування
# Абстрагування - спосіб виділити набір вагомих хар-к об'єкта та шаблонів поведінки, які чітко визначають його концептуальні межі, що відрізняють його від інших об'єктів
# Абстрагування - набір хар-к об'єкта та шаблонів поведінки, що виникає в результаті абстрагування
#                   Конструктор та деструктор
# Конструктов - спеціальний метод класу, який автоматично викликається при створенні об'єкта (метод класу з назвою __init__)
# Деструктор - спеціальний метод класу, що викликається для знищення об'єкта і призначений для його де-ініціалізації (звільнення ресурсів - пам'яті, закриття файлів)
# def __dell__(self)